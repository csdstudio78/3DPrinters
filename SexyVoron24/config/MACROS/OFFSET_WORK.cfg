[gcode_macro OFFSET_RANDOM]
variable_rnd_enable: 1 #DEFAULT SETTING
variable_rnd_xoffset: 0
variable_rnd_yoffset: 0
gcode:
  # send variables from SS in start code:  AREA_START={first_layer_print_min[0]},{first_layer_print_min[1]} AREA_END={first_layer_print_max[0]},{first_layer_print_max[1]}
  #
  {% if (params.AREA_START) and (params.AREA_END) and (printer["gcode_macro OFFSET_RANDOM"].rnd_enable|int)%}
    {% set max_x = 325 %} ; max printable x
    {% set max_y = 350 %} ; hard coding these because klipper doesn't allow seperate max travel and max endstop, so we're matching SS bed size of 325x340
    ; klipper max bed size is actually 350x350 but I removed 25mm for the purge area and 10mm off the Y to stay within printable bounds of the belt
    {% set padding = 10 %} #DEFINTE PADDING; MAX random shift will not move print outside this padding
    {% set rnd_xoffset = 0 %} #RESET DEFAULTS
    {% set rnd_yoffset = 0 %} #RESET DEFAULTS
    
    {% set area_min_x = params.AREA_START.split(",")[0]|default(0)|int %} #AREA_START X provided by super slicer
    {% set area_min_y = params.AREA_START.split(",")[1]|default(0)|int %} #AREA_START Y provided by super slicer
    {% set area_max_x = params.AREA_END.split(",")[0]|default(printer.configfile.config["stepper_x"]["position_max"])|int %} #PRINT MAX X IN CONFIG
    {% set area_max_y = params.AREA_END.split(",")[1]|default(printer.configfile.config["stepper_y"]["position_max"])|int %} #PRINT MAX Y IN CONFIG
    {% set area_x_size = area_max_x-area_min_x %} ; actual print size in x
    {% set area_y_size = area_max_y-area_min_y %} ; actual print size in y
    

    {% set area_x_offset = (max_x-area_x_size)/2-area_min_x %} ; find printer area offset from center for x
    {% set area_y_offset = (max_y-area_y_size)/2-area_min_y %} ; find printer area offset from center for y
    
    {% set max_x_size = max_x-padding*2 %} ; removing padding around the belt to determing maximum shift
    {% set max_y_size = max_y-padding*2 %} ; anything larger than this will not be positioned randomly

    {% set max_xoffset = (((max_x_size-area_x_size)/2)-2)|int %} ; find maximum xoffset - 2 for safe margin of movable distance
    {% set max_yoffset = (((max_y_size-area_y_size)/2)-2)|int %} ; find maximum yoffset - 2 for safe margin of movable distance

    {% if (max_xoffset) > padding %} # if x offset is greater than padding enable random x
      {% set rnd_xoffset = (range(-1*max_xoffset, max_xoffset) | random) + area_x_offset %} # adding padding
    {% endif %}
    {% if (max_yoffset) > padding %} # if y offset is greater than padding enable random y
      {% set rnd_yoffset = (range(-1*max_yoffset, max_yoffset) | random) + area_y_offset %} # adding padding
    {% endif %}


    # ERROR CHECKING to prevent 'out of bounds' error during print
    # if offset is being requested, check to verify offset + area is < max - padding
    # any failure here will abort the random placement but allow the print to continue
    {% if (rnd_xoffset != 0) %}
      {% if (rnd_xoffset+area_min_x < padding) %}
        RESPOND TYPE=error MSG="ERROR: Min X is less than {padding}: {rnd_xoffset+area_min_x}"
        RESPOND TYPE=error MSG="Aborting Random Placement"
        {% set rnd_xoffset = 0 %}
      {% endif %}
      {% if (rnd_xoffset+area_max_x > max_x-padding) %}
        RESPOND TYPE=error MSG="ERROR:Max X is greater than {max_x-padding}: {rnd_xoffset+area_max_x}"
        RESPOND TYPE=error MSG="Aborting Random Placement"
        {% set rnd_xoffset = 0 %}
      {% endif %}
    {% endif %}
    {% if (rnd_yoffset != 0) %}
      {% if (rnd_yoffset+area_min_y < padding) %}
        RESPOND TYPE=error MSG="ERROR:Min Y less than {padding}: {rnd_yoffset+area_min_y}"
        RESPOND TYPE=error MSG="Aborting Random Placement"
        {% set rnd_yoffset = 0 %}
      {% endif %}
      {% if (rnd_yoffset+area_max_y > max_y-padding) %}
        RESPOND TYPE=error MSG="ERROR: Max Y is greater than {max_y-padding}: {rnd_yoffset+area_max_y}"
        RESPOND TYPE=error MSG="Aborting Random Placement"
        {% set rnd_yoffset = 0 %}
      {% endif %}
    {% endif %}

    # FINAL OFFSET applied (if ERROR CHECKING above pass)
    SET_GCODE_OFFSET X={rnd_xoffset} Y={rnd_yoffset}
    {% if (rnd_xoffset != 0 or rnd_yoffset != 0) %}
      RESPOND MSG="Applying Random Offset: X{rnd_xoffset}, Y{rnd_yoffset}"
    {% else %}
      RESPOND MSG="No Random Offset: Print is too large or out of bounds check failed"
    {% endif %}    
    
    SET_GCODE_VARIABLE MACRO=OFFSET_RANDOM VARIABLE=rnd_xoffset VALUE={rnd_xoffset}
    SET_GCODE_VARIABLE MACRO=OFFSET_RANDOM VARIABLE=rnd_yoffset VALUE={rnd_yoffset}
  {% else %}
    RESPOND MSG="Random Offset: Disabled or Area not provided"
    CLEAR_WORK_OFFSET
  {% endif %}

[gcode_macro CLEAR_WORK_OFFSET]
gcode:
  SET_GCODE_VARIABLE MACRO=OFFSET_RANDOM VARIABLE=rnd_xoffset VALUE=0
  SET_GCODE_VARIABLE MACRO=OFFSET_RANDOM VARIABLE=rnd_yoffset VALUE=0
  SET_GCODE_OFFSET X=0 Y=0 MOVE=0
  RESPOND MSG="Cleared Work Offset"

[gcode_macro DISABLE_RANDOM_PLACEMENT]
gcode:
  SET_GCODE_VARIABLE MACRO=OFFSET_RANDOM VARIABLE=rnd_enable VALUE=0
  RESPOND MSG="Random Offset: DISABLED NEXT PRINT"

[gcode_macro ENABLE_RANDOM_PLACEMENT]
gcode:
  SET_GCODE_VARIABLE MACRO=OFFSET_RANDOM VARIABLE=rnd_enable VALUE=1
  RESPOND MSG="Random Offset: ENABLED NEXT PRINT"