[gcode_macro PRINT_START]
gcode:
    {% set paramAreaStart = params.AREA_START%}
    {% set paramAreaEnd = params.AREA_END%}
    {% set new_hotend = params.HOTEND|float %}
    {% set new_bed = params.BED|float %}
    TURN_ON_LIGHTS
    NO_SKIP_NEXT_M600
    M106 S0 ;  part fan 0
    M220 S100; reset speed
    M221 S100; reset flow
    LockFanDisabled
    M104 S200 ; set and do not wait
    M140 S{new_bed} ; set and do not wait
    G21 ; set units to millimeters
    G90 ; use absolute coordinates
    G28 ; home xyz
    G0 Z50 F3600 ; move to hold
    G0 X125 Y0 F7000
    RESPOND TYPE=command MSG="WAITING FOR BED"
    {% if printer.heater_bed.temperature+5 > new_bed %}
      M140 S{new_bed} ; set and do not wait if bed is within 5 or above
    {% else %}
      M190 S{new_bed} ; set and wait before MESH CAL
    {% endif %}
    {% if printer.extruder.can_extrude %}
        G92 E0
        G1 E-5 ;pull back 5mm filament to prevent drops on the bed while MESH CAL is running
        G92 E0
    {% endif %} 
    G28
    BED_MESH_CALIBRATE #AREA_START={paramAreaStart} AREA_END={paramAreaEnd} ; BED MESH using AREA START x/y and AREA END xy sent from the slicer
    G0 Z50 F3600
    RESPOND TYPE=command MSG="WAITING FOR HOTEND"
    M109 S{new_hotend} ; set and wait for hotend
    #G1 X0 Y0 F7000.0 ; move head to purge
    #G1 Z0.2 F2000.0 ; drop z
    #M83 ;set extruder to relative
    #G92 E0.0
    #G1 X40.0 E10 F1000.0 ; purge line
    #G1 X80.0 E12.5 F1000.0 ; purge line
    #G1 X100.0 E5.0 F1000.0 ; purge line
    #G1 E-0.1 ; retract to reduce blob
    MAKE_POOP
    RESPOND TYPE=command MSG="GO TIME!"

[gcode_macro BED_MESH_CALIBRATE_CRAP]
#rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	    {% set area_min_y = params.AREA_START.split(",")[1]|float %}
	    {% set area_max_x = params.AREA_END.split(",")[0]|float %}
	    {% set area_max_y = params.AREA_END.split(",")[1]|float %}
        {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples=2 ;{probe_samples|int}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}


