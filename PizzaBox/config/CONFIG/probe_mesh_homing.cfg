[probe]
pin: PG10
#z_offset: 1.075 # lower value will increase head distance 0.93 for PEI, 1.30 for textured
y_offset: -23.4
x_offset: -17
lift_speed: 200
speed: 20
samples: 1
samples_result: average
sample_retract_dist: 1.5
samples_tolerance: 0.04
samples_tolerance_retries: 7

[bed_mesh]
speed: 800
horizontal_move_z: 3
mesh_min: 30,30
mesh_max: 283, 257
probe_count: 5,5
fade_start: 1
fade_end: 20
fade_target: 0
algorithm: bicubic
#bicubic_tension: 0.2

#[safe_z_home]
#home_xy_position: 60,60 # Change coordinates to the center of your print bed
#speed: 100
#z_hop: 5                 # Move up 5mm
#z_hop_speed: 10

#--------------------------------------------------------------------

[homing_override]
set_position_x:0
set_position_y:0
set_position_z:0
gcode:
    {% set state = printer['gcode_button BED_SENSOR'].state %} # : PRESSED  or RELEASED
    {% if state == "PRESSED" %}
      SILENT_MODE
      SET_GCODE_VARIABLE MACRO=GLOBAL_VARS VARIABLE=silentaccel VALUE={printer.configfile.settings.printer.max_accel|int/2}
      SET_GCODE_VARIABLE MACRO=GLOBAL_VARS VARIABLE=crazyaccel VALUE={printer.configfile.settings.printer.max_accel}
      LIGHTS_HIGH
      SET_VELOCITY_LIMIT ACCEL=2000
      G0 Z2
      SET_TMC_CURRENT STEPPER=stepper_z CURRENT=0.65
      #SET_TMC_CURRENT STEPPER=stepper_x CURRENT=0.50
      #SET_TMC_CURRENT STEPPER=stepper_y CURRENT=0.50
      G28 X
      G28 Y
      #SET_TMC_CURRENT STEPPER=stepper_x CURRENT=1.50
      #SET_TMC_CURRENT STEPPER=stepper_y CURRENT=1.50
      #HomeWiperArm
      G90
      G0 X165 Y165 F25000
      G28 Z
      SET_TMC_CURRENT STEPPER=stepper_z CURRENT=1.20
      #SET_VELOCITY_LIMIT ACCEL={{printer.configfile.settings.printer.max_accel if printer.configfile.settings.printer.max_accel <25000 else 12000}}
      _SET_SAFE_ACCEL
      SET_GCODE_VARIABLE MACRO=GLOBAL_VARS VARIABLE=park_y VALUE={printer.configfile.config["stepper_y"]["position_max"]|float-2}
      SET_GCODE_VARIABLE MACRO=GLOBAL_VARS VARIABLE=park_z VALUE={printer.configfile.config["stepper_z"]["position_max"]|float-1}
      G0 Z40 F7200
      PARK_XY
      CRAZY_MODE
    {% else %}
      RESPOND TYPE=error MSG="NO BED PRESENT!!!"
    {% endif %}
    #G0 Z20
#   A list of G-Code commands to execute in place of G28 commands
#   found in the normal g-code input. See docs/Command_Templates.md
#   then it will invoke the normal homing procedure for the printer.
#   The commands listed here must home all axes. This parameter must
#   be provided.
axes: xyz

[gcode_macro BED_MESH_CALIBRATE_CRAP]
; rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 1
; minimum probe count
variable_min_probe_count : 3
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	    {% set area_min_y = params.AREA_START.split(",")[1]|float %}
	    {% set area_max_x = params.AREA_END.split(",")[0]|float %}
	    {% set area_max_y = params.AREA_END.split(",")[1]|float %}
        {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}